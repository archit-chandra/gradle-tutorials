// define the task graph
defaultTasks 'doFinish'

task doStartProcess{
    doLast {
        logger.info "$name : Now starting the process - OK"
    }
}

task doStep2{
    doLast {
        logger.info "$name : Performed - OK"
    }
}

task doSomethingInTheMiddle (dependsOn: ['doStartProcess', tasks.findAll { task -> task.name.startsWith('doStep2') }]){
    doLast {
        logger.info "$name : Performed the middle step - OK"
    }
}

task doFinish {
    doLast {
        logger.info "$name : Done - OK >>>>>> with version = $version"
    }
}

///////////////////////////////////////////////////////////////////////

// project is implied, it can be omitted
// project.tasks.findAll(closure) returns 1 or more task. Otherwise, runtime error
logger.info ">>>>>>>>>>>>>>>>>>>>>> ${project.tasks.findAll { task -> task.name.startsWith('doStep2') }}"

///////////////////////////////////////////////////////////////////////

if(Math.random()< 0.5){
    doFinish.dependsOn doSomethingInTheMiddle, doStep2
}

///////////////////////////////////////////////////////////////////////

project.gradle.taskGraph.whenReady {
    logger.info ">>>>>>>>>>>>>>>>>>>>> $project.gradle.taskGraph.allTasks"
}

///////////////////////////////////////////////////////////////////////

project.gradle.taskGraph.whenReady { taskGraph ->
    if(taskGraph.hasTask(doStep2)){
        project.version = "1.0"
    } else {
        project.version = "1.0-SNAPSHOT"
    }
}

///////////////////////////////////////////////////////////////////////

project.gradle.taskGraph.beforeTask { task ->
    logger.info ">>>>>>>>>>>>>>>>>>>>> Before task : $task.name"
}

project.gradle.taskGraph.afterTask { task ->
    logger.info ">>>>>>>>>>>>>>>>>>>>> After task : $task.name"
}

///////////////////////////////////////////////////////////////////////