// NOTES: closures {}
//   1. It is like lambdas, {code_blocks}
//   2. It can be assigned to a variable
//   3. It is like method and return the value of the last statement
//   4. It can take parameters (typed/untyped)
//   5. It can be passed as parameter to the method (it must be the last argument among parameters)

def echoIt = {
    println 'Hello World'
}

// It doesn't work. It will print reference of the variable (by toString method)
// To evaluate the closure, use ()
println echoIt

println '----------------------------------------------------------------------'

println echoIt() // null will be printed, since println does't return the value

println '----------------------------------------------------------------------'

def takeIt = {p ->
    println p
}

takeIt("Take It!!")

println '----------------------------------------------------------------------'

Closure takeMany = {a, b, c ->
    println a
    println b
    println c
    100      // this value will be returned by closure because it is the last statement
}

takeMany(22, 33, 77)
println takeMany("Happy", "New", "Year")

println '----------------------------------------------------------------------'

// Pass closure as parameters

def oneArgMethod(closure){
    closure()*2
}

println oneArgMethod {4}

println '======'

def twoArgMethod(factor, closure){
    closure()*factor
}

println twoArgMethod(5, {10}) // closure must be the last argument among parameters


println '======'

def i = oneArgMethod {
    def y = 3
    y * 2
}
println i // 12

println '======'

def r = twoArgMethod(5, {
    def y = 3
    y * 2
})
println r // 30


println '----------------------------------------------------------------------'