// NOTES: closures {}
//   1. It is like lambdas, {code_blocks}
//   2. It can be assigned to a variable = the value of the last statement
//   3. It is like method and return the value of the last statement
//   4. It can take parameters (typed/untyped)
//   5. It can be passed as parameter to the method (it must be the last argument among parameters)
//   6. Use closure() to execute the statements in the closure
//   7. It keeps the reference to the context (object) in which they are defined (and not their values)

//** Delegate object = context object, for which closure keeps reference and runs against it


class Person {

    String name = "Fred"

    Closure nameSayer = {
        println name
    }
}

def p1 = new Person()

p1.nameSayer    // It will not evaluate the closure and do nothing.
p1.nameSayer()  // print -> Fred


println '--------------------------------------------------------------------------'

def theName = "John" // David

def sayName = {
    println theName
}

sayName()     // print -> John, // David

println '--------------------------------------------------------------------------'

// Delegate object

class Applicant {

    String aName
    Integer aAge

    Applicant(aName, aAge){
        this.aName = aName
        this.aAge = aAge
    }

    def executeInside(Closure closure) {

        // setting delegate object of closure to 'this'
        // where, this = instance of Applicant
        closure.delegate = this
        closure()
    }
}

def a1 = new Applicant("Amit", 55)
println a1.aName  // Amit

println '====='

a1.executeInside {
    println aName // Amit
    println aAge  // 55
}